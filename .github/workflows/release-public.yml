name: Build and Release (Unified)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: aarch64-apple-darwin

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Tauri app (macOS ARM only for testing)
      run: |
        # Configure for macOS without code signing for testing
        mkdir -p ~/.tauri
        cat > ~/.tauri/settings.json << EOL
        {
          "macOSCodeSign": {
            "identity": null,
            "hardened": false
          }
        }
        EOL
        
        # Build for Apple Silicon (ARM64)
        npx tauri build --target aarch64-apple-darwin
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        MACOSX_DEPLOYMENT_TARGET: "10.13"

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: List built files (for debugging)
      run: |
        echo "=== Checking build output ==="
        if [ -d "src-tauri/target/aarch64-apple-darwin/release/bundle" ]; then
          find src-tauri/target/aarch64-apple-darwin/release/bundle -type f -name "*.dmg" -o -name "*.app"
        else
          echo "Bundle directory not found"
          ls -la src-tauri/target/ || echo "Target directory not found"
        fi

    - name: Create Release in Public Repository
      id: create_public_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
      with:
        repository: kristiangarcia/luminakraft-launcher-releases
        tag_name: ${{ github.ref_name }}
        name: LuminaKraft Launcher v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## ðŸš€ LuminaKraft Launcher v${{ steps.get_version.outputs.VERSION }}
          
          ### ðŸ“¥ Downloads
          - **macOS (Apple Silicon)**: Download the `.dmg` installer below
          - **Auto-updates**: The launcher will notify you of future updates
          
          ### ðŸ”§ Installation
          1. Download the DMG file for your platform
          2. Open the DMG and drag the app to Applications
          3. Launch LuminaKraft Launcher
          
          ### ðŸ“‹ Changes
          - Bug fixes and improvements
          - Enhanced performance
          - Updated dependencies
          
          ### ðŸ”— Links
          - [Official Website](https://luminakraft.com)
          - [Support](https://discord.gg/luminakraft)
          
          ---
          
          **Note**: This launcher is developed privately. Only releases are public for download.
        draft: false
        prerelease: false
        files: |
          src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg

    - name: Create Release in Private Repository (Internal tracking)
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Internal Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## ðŸ“‹ Internal Release Tracking
          
          **Public release**: https://github.com/kristiangarcia/luminakraft-launcher-releases/releases/tag/${{ github.ref_name }}
          
          ### ðŸ”§ Build Info
          - **Platform**: macOS ARM (Apple Silicon) - Windows commented for testing
          - **Version**: ${{ steps.get_version.outputs.VERSION }}
          - **Commit**: ${{ github.sha }}
          
          ### ðŸ“¦ Assets
          - DMG installer (Apple Silicon): âœ…
        draft: false
        prerelease: false
      continue-on-error: true

    - name: Summary
      run: |
        echo "=== Release Summary ==="
        echo "âœ… Version: ${{ steps.get_version.outputs.VERSION }}"
        echo "âœ… Public release: https://github.com/kristiangarcia/luminakraft-launcher-releases/releases/tag/${{ github.ref_name }}"
        echo "âœ… Private tracking: https://github.com/kristiangarcia/luminakraft-launcher/releases/tag/${{ github.ref_name }}"
        echo "ðŸŽ‰ Release completed successfully!"

  # TODO: Uncomment when ready for Windows builds
  # build-windows:
  #   runs-on: windows-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: stable
  #         targets: x86_64-pc-windows-msvc
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Build application
  #       run: npm run build
  #     - name: Build Tauri app (Windows)
  #       run: npm run tauri build
  #       env:
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  #     # ... Windows release steps

  # TODO: Uncomment when ready for Linux builds
  # build-linux:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     # ... Linux build steps 