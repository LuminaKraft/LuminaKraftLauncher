#!/bin/bash

# üîÑ Setup Script para Soluci√≥n H√≠brida LuminaKraft Launcher
# ============================================================

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuraci√≥n
PRIVATE_REPO="kristiangarcia/luminakraft-launcher"
PUBLIC_REPO="kristiangarcia/luminakraft-launcher-releases"
CURRENT_DIR=$(pwd)

# Funciones de utilidad
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_step() {
    echo -e "${PURPLE}üîß $1${NC}"
}

# Banner
echo -e "${CYAN}"
cat << "EOF"
  ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   
  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù        ‚ïö‚ïê‚ïù   
                                                                                             
                          üîÑ Hybrid Solution Setup üîÑ
EOF
echo -e "${NC}"

echo -e "${CYAN}============================================================================${NC}"
echo -e "${GREEN}  üöÄ Configurando Soluci√≥n H√≠brida para LuminaKraft Launcher${NC}"
echo -e "${CYAN}============================================================================${NC}"
echo ""

# Verificar si estamos en el repositorio correcto
log_step "Verificando repositorio actual..."
if [[ ! -f "src-tauri/Cargo.toml" ]]; then
    log_error "No se encontr√≥ src-tauri/Cargo.toml. ¬øEst√°s en el directorio correcto?"
    exit 1
fi

if [[ ! -f "package.json" ]]; then
    log_error "No se encontr√≥ package.json. ¬øEst√°s en el directorio del launcher?"
    exit 1
fi

log_success "Repositorio verificado correctamente"

# Verificar Git
log_step "Verificando configuraci√≥n de Git..."
if ! command -v git &> /dev/null; then
    log_error "Git no est√° instalado"
    exit 1
fi

CURRENT_REMOTE=$(git remote get-url origin 2>/dev/null || echo "")
if [[ $CURRENT_REMOTE != *"$PRIVATE_REPO"* ]]; then
    log_warning "El remote actual no parece ser el repositorio privado esperado"
    log_info "Remote actual: $CURRENT_REMOTE"
    log_info "Remote esperado: *$PRIVATE_REPO*"
    echo ""
    read -p "¬øContinuar de todas formas? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Setup cancelado por el usuario"
        exit 0
    fi
fi

log_success "Git configurado correctamente"

# Verificar GitHub CLI (opcional)
log_step "Verificando GitHub CLI..."
if command -v gh &> /dev/null; then
    log_success "GitHub CLI encontrado"
    GH_AVAILABLE=true
else
    log_warning "GitHub CLI no encontrado. Configuraci√≥n manual requerida para secrets"
    GH_AVAILABLE=false
fi

# Verificar workflows existentes
log_step "Verificando workflows existentes..."

WORKFLOWS_DIR=".github/workflows"
if [[ ! -d "$WORKFLOWS_DIR" ]]; then
    log_info "Creando directorio de workflows..."
    mkdir -p "$WORKFLOWS_DIR"
fi

# Listar workflows existentes
log_info "Workflows encontrados:"
for workflow in "$WORKFLOWS_DIR"/*.yml; do
    if [[ -f "$workflow" ]]; then
        echo "  üìÑ $(basename "$workflow")"
    fi
done

# Verificar secrets requeridos
log_step "Verificando secrets requeridos..."

REQUIRED_SECRETS=(
    "PUBLIC_REPO_TOKEN"
    "TAURI_PRIVATE_KEY" 
    "TAURI_KEY_PASSWORD"
)

if [[ $GH_AVAILABLE == true ]]; then
    log_info "Verificando secrets existentes..."
    for secret in "${REQUIRED_SECRETS[@]}"; do
        if gh secret list | grep -q "$secret"; then
            log_success "Secret '$secret' encontrado"
        else
            log_warning "Secret '$secret' no encontrado"
        fi
    done
else
    log_info "Secrets requeridos (configurar manualmente):"
    for secret in "${REQUIRED_SECRETS[@]}"; do
        echo "  üîë $secret"
    done
fi

# Configurar remote del repositorio p√∫blico
log_step "Configurando remote del repositorio p√∫blico..."

if git remote get-url public &>/dev/null; then
    CURRENT_PUBLIC=$(git remote get-url public)
    log_info "Remote 'public' ya existe: $CURRENT_PUBLIC"
    
    if [[ $CURRENT_PUBLIC != *"$PUBLIC_REPO"* ]]; then
        log_warning "El remote p√∫blico no coincide con el esperado"
        read -p "¬øActualizar remote p√∫blico? (Y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
            git remote set-url public "https://github.com/$PUBLIC_REPO.git"
            log_success "Remote p√∫blico actualizado"
        fi
    else
        log_success "Remote p√∫blico configurado correctamente"
    fi
else
    log_info "Agregando remote p√∫blico..."
    git remote add public "https://github.com/$PUBLIC_REPO.git"
    log_success "Remote p√∫blico agregado"
fi

# Mostrar configuraci√≥n actual
echo ""
echo -e "${CYAN}============================================================================${NC}"
echo -e "${GREEN}  üìã Configuraci√≥n Actual${NC}"
echo -e "${CYAN}============================================================================${NC}"

echo -e "${BLUE}üîó Remotes configurados:${NC}"
git remote -v | sed 's/^/  /'

echo ""
echo -e "${BLUE}üîÑ Workflows disponibles:${NC}"
for workflow in "$WORKFLOWS_DIR"/*.yml; do
    if [[ -f "$workflow" ]]; then
        echo "  üìÑ $(basename "$workflow")"
    fi
done

echo ""
echo -e "${BLUE}üîë Secrets requeridos:${NC}"
for secret in "${REQUIRED_SECRETS[@]}"; do
    echo "  üîë $secret"
done

# Instrucciones finales
echo ""
echo -e "${CYAN}============================================================================${NC}"
echo -e "${GREEN}  üöÄ Pr√≥ximos Pasos${NC}"
echo -e "${CYAN}============================================================================${NC}"

echo -e "${YELLOW}1. Configurar Secrets en GitHub:${NC}"
echo "   üìç Ve a: https://github.com/$PRIVATE_REPO/settings/secrets/actions"
echo "   üîë Agrega los secrets requeridos"
echo ""

echo -e "${YELLOW}2. Configurar Secrets en el Repo P√∫blico:${NC}"
echo "   üìç Ve a: https://github.com/$PUBLIC_REPO/settings/secrets/actions"
echo "   üîë Agrega TAURI_PRIVATE_KEY y TAURI_KEY_PASSWORD (mismos valores)"
echo ""

echo -e "${YELLOW}3. Probar la Configuraci√≥n:${NC}"
echo "   üß™ Ejecuta un workflow manualmente desde GitHub Actions"
echo "   üìç https://github.com/$PRIVATE_REPO/actions"
echo ""

echo -e "${YELLOW}4. Crear tu Primera Release:${NC}"
echo "   üè∑Ô∏è  git tag v1.0.0"
echo "   üì§ git push origin v1.0.0"
echo ""

if [[ $GH_AVAILABLE == true ]]; then
    echo -e "${BLUE}üí° Comandos √∫tiles con GitHub CLI:${NC}"
    echo "   gh secret set PUBLIC_REPO_TOKEN --body 'tu-token-aqui'"
    echo "   gh secret set TAURI_PRIVATE_KEY --body 'tu-clave-privada'"
    echo "   gh secret set TAURI_KEY_PASSWORD --body 'tu-password'"
    echo ""
fi

echo -e "${GREEN}‚úÖ Setup de la Soluci√≥n H√≠brida completado${NC}"
echo -e "${CYAN}üìñ Para m√°s informaci√≥n, consulta: HYBRID_SOLUTION.md${NC}"

# Verificar si hay cambios para commit
if [[ -n $(git status --porcelain) ]]; then
    echo ""
    log_info "Se detectaron cambios en el repositorio"
    echo -e "${YELLOW}¬øQuieres hacer commit de los cambios? (Y/n):${NC}"
    read -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
        git add .
        git commit -m "üîÑ Setup: Configuraci√≥n h√≠brida de repositorios

- Agregado remote p√∫blico
- Workflows actualizados
- Documentaci√≥n h√≠brida a√±adida"
        log_success "Cambios committed correctamente"
        
        echo -e "${YELLOW}¬øHacer push al repositorio privado? (Y/n):${NC}"
        read -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
            git push origin main
            log_success "Cambios pusheados al repositorio privado"
        fi
    fi
fi

echo ""
echo -e "${GREEN}üéâ ¬°Configuraci√≥n completada exitosamente!${NC}"
echo -e "${BLUE}üöÄ Tu soluci√≥n h√≠brida est√° lista para usar${NC}" 