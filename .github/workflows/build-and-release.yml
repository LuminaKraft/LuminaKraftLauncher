name: 'Build and Release'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Get version and prerelease status
        run: |
          echo "PACKAGE_VERSION=$(node -pe "require('./package.json').version")" >> $GITHUB_ENV
          echo "IS_PRERELEASE=$(node -pe "require('./package.json').isPrerelease || false")" >> $GITHUB_ENV
      - name: Generate release description
        run: |
          # Use the generation script
          DESCRIPTION=$(node scripts/generate-release-description.cjs ${{ env.PACKAGE_VERSION }} ${{ env.IS_PRERELEASE == 'true' && '--prerelease' || '' }})
          echo "RELEASE_DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$DESCRIPTION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.PACKAGE_VERSION;
            const isPrerelease = process.env.IS_PRERELEASE === 'true';
            
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `LuminaKraft Launcher v${version}`,
              body: process.env.RELEASE_DESCRIPTION,
              draft: true,
              prerelease: isPrerelease
            })
            return data.id

  build-binaries:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for ARM based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Fix MSI version format (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # Convert alpha.X to valid semver format for MSI compatibility
          # Keep proper semver format but use patch version for MSI numbering
          $version = (Get-Content package.json | ConvertFrom-Json).version
          if ($version -match '(\d+)\.(\d+)\.(\d+)-alpha\.(\d+)') {
            $major = [int]$matches[1]
            $minor = [int]$matches[2]  
            $patch = [int]$matches[3]
            $alpha = [int]$matches[4]
            # Create MSI-compatible version: increment patch by alpha number
            $msiVersion = "$major.$minor.$($patch + $alpha)"
            Write-Host "Converting version from $version to $msiVersion for MSI compatibility"
            # Only modify tauri.conf.json for MSI, keep Cargo.toml with original version
            (Get-Content src-tauri/tauri.conf.json) -replace '"version": "[^"]*"', "`"version`": `"$msiVersion`"" | Set-Content src-tauri/tauri.conf.json
          } elseif ($version -match '(\d+)\.(\d+)\.(\d+)-beta\.(\d+)') {
            $major = [int]$matches[1]
            $minor = [int]$matches[2]
            $patch = [int]$matches[3]
            $beta = [int]$matches[4]
            # Create MSI-compatible version: increment patch by 10 + beta number
            $msiVersion = "$major.$minor.$($patch + 10 + $beta)"
            Write-Host "Converting version from $version to $msiVersion for MSI compatibility"
            # Only modify tauri.conf.json for MSI, keep Cargo.toml with original version
            (Get-Content src-tauri/tauri.conf.json) -replace '"version": "[^"]*"', "`"version`": `"$msiVersion`"" | Set-Content src-tauri/tauri.conf.json
          }
        shell: pwsh

      - uses: tauri-apps/tauri-action@v0.5.20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    needs: [create-release, build-binaries]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Get prerelease status
        run: echo "IS_PRERELEASE=$(node -pe "require('./package.json').isPrerelease || false")" >> $GITHUB_ENV
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
          is_prerelease: ${{ env.IS_PRERELEASE }}
        with:
          script: |
            const isPrerelease = process.env.is_prerelease === 'true';
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: isPrerelease
            })

  sign-update:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    needs: publish-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Sign update and update manifest
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: node scripts/sign-update.cjs

      - name: Commit and push updater.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add updater.json src-tauri/tauri.conf.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit.";
          else
            git commit -m "chore(ci): add update signatures"
            git push origin HEAD:main 