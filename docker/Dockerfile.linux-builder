FROM --platform=linux/amd64 ubuntu:22.04

# Set environment variables for memory optimization
ENV DEBIAN_FRONTEND=noninteractive \
    CARGO_NET_GIT_FETCH_WITH_CLI=true \
    CARGO_BUILD_JOBS=2 \
    RUSTFLAGS="-C link-arg=-Wl,--no-keep-memory -C link-arg=-Wl,--reduce-memory-overheads"

# Install basic dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    libssl-dev \
    libgtk-3-dev \
    libwebkit2gtk-4.0-dev \
    libwebkit2gtk-4.1-dev \
    libappindicator3-dev \
    librsvg2-dev \
    libsoup-3.0-dev \
    libjavascriptcoregtk-4.1-dev \
    pkg-config \
    patchelf \
    wget \
    gnupg \
    ca-certificates \
    git \
    liblzma-dev \
    zip \
    unzip \
    xdg-utils \
    fuse \
    libfuse2 \
    rpm \
    file \
    desktop-file-utils \
    shared-mime-info \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20 (compatible with latest npm packages)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest

# Pre-download AppImage dependencies to avoid build issues
RUN mkdir -p /tmp/appimage-deps && cd /tmp/appimage-deps && \
    wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/AppRun-x86_64 && \
    wget -q https://github.com/tauri-apps/binary-releases/releases/download/linuxdeploy/linuxdeploy-x86_64.AppImage && \
    wget -q https://raw.githubusercontent.com/tauri-apps/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh && \
    wget -q https://raw.githubusercontent.com/tauri-apps/linuxdeploy-plugin-gstreamer/master/linuxdeploy-plugin-gstreamer.sh && \
    chmod +x linuxdeploy-x86_64.AppImage AppRun-x86_64 linuxdeploy-plugin-gtk.sh linuxdeploy-plugin-gstreamer.sh && \
    mkdir -p /root/.cache/tauri/linuxdeploy && \
    cp * /root/.cache/tauri/linuxdeploy/

# Install Rust 1.82.0 for consistency with Windows builds
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.82.0
ENV PATH="/root/.cargo/bin:${PATH}"

# Add Linux target
RUN rustup target add x86_64-unknown-linux-gnu

# Configure pkg-config for cross-compilation
ENV PKG_CONFIG_ALLOW_CROSS=1 \
    PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig \
    PKG_CONFIG_SYSROOT_DIR=/

# Install Tauri CLI via npm (consistent with Windows build)
RUN npm install -g @tauri-apps/cli@latest

# Prepare environment for AppImage
RUN chmod 755 /

WORKDIR /app 