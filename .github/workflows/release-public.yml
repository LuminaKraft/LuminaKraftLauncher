name: Build and Release (Multi-Platform) - FIXED

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust dependencies (excluding build artifacts)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Clean previous builds (prevents version conflicts)
        run: |
          echo "üßπ Cleaning previous builds to prevent version conflicts..."
          if (Test-Path "src-tauri/target/release/bundle/") { 
            Write-Host "Removing release bundle..."
            Remove-Item -Recurse -Force "src-tauri/target/release/bundle/" 
          }
          if (Test-Path "src-tauri/target/debug/bundle/") { 
            Write-Host "Removing debug bundle..."
            Remove-Item -Recurse -Force "src-tauri/target/debug/bundle/" 
          }
          echo "‚úÖ Build cache cleaned"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Tauri app
        run: npx tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: List generated files (for debugging)
        run: |
          echo "=== Windows Build Artifacts ==="
          if (Test-Path "src-tauri/target/release/bundle/msi/") {
            Get-ChildItem "src-tauri/target/release/bundle/msi/" -Name
          }
          if (Test-Path "src-tauri/target/release/bundle/nsis/") {
            Get-ChildItem "src-tauri/target/release/bundle/nsis/" -Name
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev \
            build-essential \
            curl \
            wget \
            file \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            libxdo-dev

      - name: Cache Rust dependencies (excluding build artifacts)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Clean previous builds (prevents version conflicts)
        run: |
          echo "üßπ Cleaning previous builds to prevent version conflicts..."
          rm -rf src-tauri/target/release/bundle/ || true
          rm -rf src-tauri/target/debug/bundle/ || true
          echo "‚úÖ Build cache cleaned"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Tauri app
        run: npx tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: List generated files (for debugging)
        run: |
          echo "=== Linux Build Artifacts ==="
          find src-tauri/target/release/bundle/ -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" 2>/dev/null | sort || true

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: |
            x86_64-apple-darwin
            aarch64-apple-darwin

      - name: Cache Rust dependencies (excluding build artifacts)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Clean previous builds (prevents version conflicts)
        run: |
          echo "üßπ Cleaning previous builds to prevent version conflicts..."
          rm -rf src-tauri/target/*/release/bundle/ || true
          rm -rf src-tauri/target/*/debug/bundle/ || true
          echo "‚úÖ Build cache cleaned"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure macOS build (no code signing for testing)
        run: |
          mkdir -p ~/.tauri
          cat > ~/.tauri/settings.json << EOL
          {
            "macOSCodeSign": {
              "identity": null,
              "hardened": false
            }
          }
          EOL

      - name: Build Tauri app (Apple Silicon - ARM64)
        run: npx tauri build --target aarch64-apple-darwin
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          MACOSX_DEPLOYMENT_TARGET: "10.13"

      - name: Build Tauri app (Intel - x86_64)
        run: npx tauri build --target x86_64-apple-darwin
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          MACOSX_DEPLOYMENT_TARGET: "10.13"

      - name: List generated files (for debugging)
        run: |
          echo "=== macOS Build Artifacts ==="
          find src-tauri/target/*/release/bundle/ -name "*.dmg" -o -name "*.app" 2>/dev/null | sort || true

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app
          if-no-files-found: error

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
          # Check if this is a pre-release from package.json
          IS_PRERELEASE=$(node -p "JSON.parse(require('fs').readFileSync('package.json', 'utf8')).isPrerelease || false")
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "üîç Debug package.json isPrerelease field:"
          node -p "const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8')); console.log('isPrerelease:', pkg.isPrerelease, 'type:', typeof pkg.isPrerelease); pkg.isPrerelease"
          
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            echo "‚úÖ This is a PRE-RELEASE: $VERSION"
          else
            echo "‚úÖ This is a STABLE release: $VERSION"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded artifacts (for debugging version conflicts)
        run: |
          echo "=== All Downloaded Artifacts ==="
          find artifacts/ -type f -name "*.msi" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" | sort
          echo ""
          echo "üîç Checking for version conflicts:"
          echo "Files with correct version (${{ steps.get_version.outputs.VERSION }}):"
          find artifacts/ -name "*${{ steps.get_version.outputs.VERSION }}*" | sort
          echo ""
          echo "‚ùå Files with INCORRECT versions (should be investigated):"
          find artifacts/ -type f \( -name "*.msi" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" \) ! -name "*${{ steps.get_version.outputs.VERSION }}*" | sort

      - name: Create Release in Public Repository
        id: create_public_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
        with:
          repository: kristiangarcia/luminakraft-launcher-releases
          tag_name: ${{ github.ref_name }}
          name: "üöÄ LuminaKraft Launcher ${{ github.ref_name }}"
          body: |
            ## üì• Instrucciones de Descarga
            
            ${{ steps.get_version.outputs.IS_PRERELEASE == 'true' && 'üß™ **Versi√≥n Pre-Release** - Esta es una versi√≥n de prueba con caracter√≠sticas experimentales' || 'üéâ **Versi√≥n Estable** - Versi√≥n lista para producci√≥n' }}
            
            ### ü™ü **Windows**
            - **MSI Installer** (`*.msi`) - Recomendado
            - **NSIS Installer** (`*.exe`) - Alternativo
            
            ### üêß **Linux**
            - **AppImage** (`*.AppImage`) - Recomendado (portable)
            - **DEB Package** (`*.deb`) - Debian/Ubuntu
            - **RPM Package** (`*.rpm`) - Red Hat/Fedora
            
            ### üçé **macOS**
            - **Apple Silicon** (`aarch64-apple-darwin.dmg`) - M1/M2/M3/M4
            - **Intel Macs** (`x86_64-apple-darwin.dmg`) - Macs Intel
            
            ## üîó Enlaces
            - üí¨ **Discord**: [√önete a nuestra comunidad](https://discord.gg/UJZRrcUFMj)
            - üêõ **Reportar bugs**: [GitHub Issues](https://github.com/kristiangarcia/luminakraft-launcher-releases/issues)
            
            ${{ steps.get_version.outputs.IS_PRERELEASE == 'true' && '‚ö†Ô∏è **Advertencia**: Esta versi√≥n puede contener errores. √ösala bajo tu propio riesgo.' || '‚úÖ **Versi√≥n estable y recomendada para todos los usuarios.**' }}
          draft: false
          prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE == 'true' }}
          files: |
            artifacts/**/*.msi
            artifacts/**/*.exe
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.dmg

      - name: Create Release in Private Repository (Internal Tracking)
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: "üìã Internal Release Tracking ${{ github.ref_name }}"
          body: |
            ## üîó **Release P√∫blico**
            **üåê Descarga**: https://github.com/kristiangarcia/luminakraft-launcher-releases/releases/tag/${{ github.ref_name }}
            
            ## üèóÔ∏è **Info de Build**
            - **Versi√≥n**: `${{ steps.get_version.outputs.VERSION }}`
            - **Commit**: `${{ github.sha }}`
            - **Pre-release**: `${{ steps.get_version.outputs.IS_PRERELEASE }}`
            
            ### üì¶ **Builds Completados**
            - ‚úÖ **Windows**: MSI + NSIS
            - ‚úÖ **Linux**: AppImage + DEB + RPM  
            - ‚úÖ **macOS**: DMG (ARM64 + x86_64)
            
            ${{ steps.get_version.outputs.IS_PRERELEASE == 'true' && 'üß™ **PRE-RELEASE** - Versi√≥n de prueba' || 'üéâ **RELEASE ESTABLE** - Versi√≥n de producci√≥n' }}
            
            ---
            **üîí Solo uso interno** - Tracking para el equipo de desarrollo.
          draft: false
          prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE == 'true' }}
        continue-on-error: true

      - name: Build Summary
        run: |
          echo "=== üéâ Release Build Summary ==="
          echo "‚úÖ Version: ${{ steps.get_version.outputs.VERSION }}"
          echo "‚úÖ Pre-release: ${{ steps.get_version.outputs.IS_PRERELEASE }}"
          echo "‚úÖ Public release: https://github.com/kristiangarcia/luminakraft-launcher-releases/releases/tag/${{ github.ref_name }}"
          echo "‚úÖ Private tracking: https://github.com/kristiangarcia/luminakraft-launcher/releases/tag/${{ github.ref_name }}"
          echo ""
          echo "üèóÔ∏è **Built Platforms:**"
          echo "  ü™ü Windows: MSI + NSIS installers"
          echo "  üêß Linux: AppImage + DEB + RPM packages"
          echo "  üçé macOS: DMG for ARM64 + x86_64"
          echo ""
          echo "üîß **Cache Fixes Applied:**"
          echo "  ‚úÖ Build artifacts cleaned before build"
          echo "  ‚úÖ Cache keys improved to prevent conflicts"
          echo "  ‚úÖ Debugging output added for artifact verification"
          echo ""
          echo "üéØ **Release completed successfully!**" 